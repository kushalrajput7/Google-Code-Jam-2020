Solution-4
The consortium has decided that distributed systems are too complicated, so they are storing B bits of important information 
in a single array on one awesome machine. 
As an additional layer of security, they have made it difficult to obtain the information quickly; 
the user must query for a bit position between 1 and B, and then they receive that bit of the stored array as a response.
Unfortunately, this ultra-modern machine is subject to random quantum fluctuations! Specifically, 
after every 1st, 11th, 21st, 31st... etc. query is sent, but before the response is given,
quantum fluctuation causes exactly one of the following four effects, with equal probability

import sys


def transform_reverse(arr):
    return arr[::-1]


def transform_complement(arr):
    return [1 - x for x in arr]


def main():
    cases, B = list(map(int, input().split()))

    for case in range(cases):
        starts = [None] * (B // 2)
        ends = [None] * (B // 2)
        current_position = 0
        query_count = 0

        done = False
        while not done:
            # We ask for 0, B-1, 1, B-2, etc. until B/2, B/2 + 1
            while query_count == 0 or query_count % 10 != 0:
                if current_position == B // 2:
                    done = True
                    break

                # Ask for 2 more positions
                print(current_position + 1)
                sys.stdout.flush()
                starts[current_position] = int(input())
                print((B - 1 - current_position) + 1)
                sys.stdout.flush()
                ends[- 1 - current_position] = int(input())
                query_count += 2
                current_position += 1

                if query_count % 10 == 0:
                    # quantum fluctuations may have happened. We can adjust the array with up to two queries
                    arr = starts[:current_position] + ends[(B // 2) - current_position:]
                    arr_c = transform_complement(arr)
                    arr_r = transform_reverse(arr)

                    # - If reverse(arr) == arr or reverse(arr) == complement(arr), then we only need to check one byte.
                    #   It can actually be the first one
                    # - Otherwise, we need to check two bytes
                    if arr_r == arr or arr_r == arr_c:
                        # We only have two outcomes: the original array or the complemented one
                        print(1)
                        sys.stdout.flush()
                        bit = int(input())
                        if arr[0] != bit:
                            arr = arr_c

                        # Dummy query, to keep the query count a multiple of 2
                        print(1)
                        sys.stdout.flush()
                        input()
                    else:
                        # Query a bit that changes only when complemented, then a bit that changes on any of the two
                        for pos in range(current_position):
                            if arr[pos] == arr_r[pos]:
                                print(pos + 1)
                                sys.stdout.flush()
                                bit = int(input())
                                if bit != arr[pos]:
                                    arr = transform_complement(arr)
                                    arr_r = transform_reverse(arr)
                                break

                        for pos in range(current_position):
                            if arr[pos] != arr_r[pos]:
                                print(pos + 1)
                                sys.stdout.flush()
                                bit = int(input())
                                if bit != arr[pos]:
                                    arr = transform_reverse(arr)
                                break

                    for pos in range(current_position):
                        starts[pos] = arr[pos]
                        ends[- 1 - pos] = arr[-1 - pos]

                    query_count += 2

            # Print the solution
            print(''.join(map(str, starts + ends)))
            sys.stdout.flush()
            input()


if __name__ == '__main__':
    main()
